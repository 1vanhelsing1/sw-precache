'use strict';

var CacheOptions = <%= cacheOptions %>;
var CACHE_NAME_PREFIX = 'gulp-sw-precache-';

importScripts('service-worker-helpers/service-worker-cache-polyfill.js');

function getCacheNameFromCacheOption(cacheOption) {
  return CACHE_NAME_PREFIX + cacheOption[0] + '-' + cacheOption[1];
}

self.addEventListener('install', function(event) {
  event.waitUntil(
    caches.keys().then(function(allCacheNames) {
      console.log('During the install phase, the current cache names are:', allCacheNames);
      Promise.all(
        CacheOptions.filter(function(cacheOption) {
          var cacheName = getCacheNameFromCacheOption(cacheOption);
          return allCacheNames.indexOf(cacheName) == -1;
        }).map(function(cacheOption) {
          var cacheName = getCacheNameFromCacheOption(cacheOption);
          console.log('About to add %O to cache named %s', cacheOption[0], cacheName);
          return caches.open(cacheName).then(function(cache) {
            return cache.add(cacheOption[0]);
          });
        })
      )
    })
  );
});

self.addEventListener('activate', function(event) {
  var currentCacheNames = CacheOptions.map(function(cacheOption) {
    return getCacheNameFromCacheOption(cacheOption);
  });

  event.waitUntil(
    caches.keys().then(function(allCacheNames) {
      console.log('During the activate phase, the current cache names are:', allCacheNames);
      return Promise.all(
        allCacheNames.filter(function(cacheName) {
          return cacheName.indexOf(CACHE_NAME_PREFIX) == 0 &&
                 currentCacheNames.indexOf(cacheName) == -1;
        }).map(function(cacheName) {
          console.log('About to delete the out-of-date cache named:', cacheName);
          return caches.delete(cacheName);
        })
      );
    })
  );
});

self.addEventListener('fetch', function(event) {
  event.respondWith(
    caches.match(event.request).then(function(response) {
      return response || fetch(event.request);
    })
  );
});
